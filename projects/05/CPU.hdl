// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Needs ALU, A and D, PC
    Mux16(a=D, b=A, sel=instruction[12], out=inX); // x = D or A
    Mux16(a=D, b=inM, sel=instruction[12], out=inY); // y = D or M
    ALU(x=inX, y=inY, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, zr=isZero, ng=notGreater);
    Not(in=notGreater, out=isGreater);

    DRegister(in=aluOut, load=instruction[4], out=D); // D register

    Mux16(a=aluOut, b=instruction, sel=instruction[15], out=toA); // instruction or alu output -> A register
    Or(a=instruction[15], b=instruction[5], out=loadA); // Loads A if A instruction or ALU bit
    ARegister(in=toA, load=loadA, out=A); // A register

    And(a=instruction[3], b=notGreater, out=firstPC);
    And(a=instruction[4], b=isZero, out=secondPC);
    And(a=instruction[5], b=isGreater, out=thirdPC);
    Or(a=firstPC, b=secondPC, out=fOrS);
    Or(a=fOrS, b=thirdPC, out=doPCLoad);
    Not(in=instruction[15], out=notAIns);
    And(a=doPCLoad, b=notAIns, out=doInc);    

    PC(in=A, load=doPCLoad, inc=notAIns, reset=reset, out[0..14]=pc);

    And(a=instruction[12], b=notAIns, out=writeM); // Write to M if C inst specifies, and is not A inst
}
